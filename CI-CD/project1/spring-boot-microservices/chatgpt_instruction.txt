🚀 How to Create Your Own Microservices Using Spring Boot (From Scratch)
This guide will walk you through building 2 microservices from scratch using Spring Boot. The two microservices will be:

User Service — Handles user management (login, registration, etc.).
Order Service — Handles order management (placing orders, order history, etc.).
Both microservices will communicate with each other using REST APIs. We'll also use MySQL as the database, Docker for containerization, and Postman for testing.

📋 Prerequisites
Before starting, make sure you have the following tools installed:

Java 17 or 11 (JDK) — Required to run Spring Boot.
Maven — For building the project.
IntelliJ IDEA or VS Code — For coding the microservices.
Postman — To test the API endpoints.
Docker — To containerize the application.
MySQL — For the database.
📂 Project Directory Structure
css
Copy code
📂 spring-boot-microservices/
 ┣ 📂 user-service/
 ┃ ┣ 📂 src/main/java/com/example/userservice/
 ┃ ┣ 📂 src/main/resources/
 ┃ ┣ 📜 application.yml
 ┃ ┣ 📜 Dockerfile
 ┃ ┗ 📜 pom.xml
 ┣ 📂 order-service/
 ┃ ┣ 📂 src/main/java/com/example/orderservice/
 ┃ ┣ 📂 src/main/resources/
 ┃ ┣ 📜 application.yml
 ┃ ┣ 📜 Dockerfile
 ┃ ┗ 📜 pom.xml
 ┣ 📂 docker-compose.yml
 ┗ 📂 README.md
1️⃣ Set Up Development Environment
Install JDK

Install Java JDK 17 or 11.
Verify by running:
bash
Copy code
java -version
Install Maven

Install Maven and verify:
bash
Copy code
mvn -version
Install IntelliJ IDEA or VS Code

Download and install IntelliJ IDEA (recommended) or VS Code with the Spring Boot plugin.
Install Docker

Download and install Docker Desktop.
Set up MySQL Database

Run MySQL in Docker using the following command:
bash
Copy code
docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=userdb -p 3306:3306 -d mysql:latest
2️⃣ Create the User Service
The User Service will have simple CRUD operations for users. It will be connected to MySQL.

Step 1: Create a Spring Boot Project
Go to Spring Initializr.
Select Maven Project and the following dependencies:
Spring Web (for API development)
Spring Data JPA (to connect to the MySQL database)
MySQL Driver (for MySQL connection)
Lombok (to avoid boilerplate code)
Click Generate and extract the project to the user-service/ directory.
Step 2: Update pom.xml
Add dependencies for MySQL, JPA, and Lombok:

xml
Copy code
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>
Step 3: Configure application.yml
yaml
Copy code
server:
  port: 8081

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/userdb
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
Step 4: Create the User Entity
File: src/main/java/com/example/userservice/entity/User.java

java
Copy code
package com.example.userservice.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
}
Step 5: Create the User Repository
File: src/main/java/com/example/userservice/repository/UserRepository.java

java
Copy code
package com.example.userservice.repository;

import com.example.userservice.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {}
Step 6: Create the User Controller
File: src/main/java/com/example/userservice/controller/UserController.java

java
Copy code
package com.example.userservice.controller;

import com.example.userservice.entity.User;
import com.example.userservice.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @GetMapping
    public List<User> getUsers() {
        return userRepository.findAll();
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable Long id) {
        return userRepository.findById(id).orElse(null);
    }
}
Step 7: Run the User Service
Run the service using:

bash
Copy code
mvn spring-boot:run
Test it with Postman:

POST: http://localhost:8081/users

json
Copy code
{
  "name": "John Doe",
  "email": "john@example.com"
}
GET: http://localhost:8081/users — View all users.

3️⃣ Create the Order Service
This service will manage orders.

Steps 1-6: Similar to User Service
Repeat steps 1 to 6 for the Order Service.
Add the following Order Entity:
java
Copy code
@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String productName;
    private Double price;
    private Long userId; // To associate order with a user
}
Add the Order Controller:
java
Copy code
@RestController
@RequestMapping("/orders")
public class OrderController {

    @Autowired
    private OrderRepository orderRepository;

    @PostMapping
    public Order createOrder(@RequestBody Order order) {
        return orderRepository.save(order);
    }

    @GetMapping
    public List<Order> getOrders() {
        return orderRepository.findAll();
    }

    @GetMapping("/{id}")
    public Order getOrderById(@PathVariable Long id) {
        return orderRepository.findById(id).orElse(null);
    }
}
4️⃣ Dockerize the Microservices
Create a Dockerfile for each service.

Dockerfile for User Service

dockerfile
Copy code
FROM openjdk:17-jdk-slim
COPY target/user-service.jar user-service.jar
ENTRYPOINT ["java", "-jar", "user-service.jar"]
Dockerfile for Order Service

dockerfile
Copy code
FROM openjdk:17-jdk-slim
COPY target/order-service.jar order-service.jar
ENTRYPOINT ["java", "-jar", "order-service.jar"]
5️⃣ Deploy with Docker Compose
Create a docker-compose.yml file:

yaml
Copy code
version: '3'
services:
  user-service:
    build: ./user-service
    ports:
      - "8081:8081"

  order-service:
    build: ./order-service
    ports:
      - "8082:8082"

  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userdb
    ports:
      - "3306:3306"
Run the services:

bash
Copy code
docker-compose up --build
💡 Next Steps
Add Service Communication: Make the Order Service call the User Service.
Add Config Server: Centralize configurations for both services.
Add Security: Use Spring Security and JWT for secure APIs.
With this project, you’ll demonstrate API design, Docker, Spring Boot, and MySQL skills. It’s an excellent addition to your LinkedIn profile.

 🚀
